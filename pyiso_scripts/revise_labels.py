import pandas as pd
import argparse

def revise_labels(target_peptide_file, features_file, revised_features_file, N):
    target_peptide = pd.read_csv(target_peptide_file, sep="\t")
    features = pd.read_csv(features_file, sep="\t", low_memory=False)

    # Get the top N PSMIds based on the highest score
    top_psmids = target_peptide.nlargest(N, 'score')['PSMId']

    # Change the label for entries in features that match the top PSMIds
    features.loc[features['SpecId'].isin(top_psmids), 'Label'] = -1

    # Update the SpecId to replace "target" with "decoy" only for the top PSMIds
    features.loc[features['SpecId'].isin(top_psmids), 'SpecId'] = (
        features.loc[features['SpecId'].isin(top_psmids), 'SpecId']
        .str.replace('^target', 'decoy', regex=True)
    )

    # Save the updated features to the output file
    features.to_csv(revised_features_file, sep="\t", index=False)
    print(f"[INFO]Revised file saved as {revised_features_file} :)")

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="Change the target labels in the features.pin file based on the top N PSM scores.")
    parser.add_argument("--target_peptide_file", required=True, help="Path to the target peptide file generated by Percolator.")
    parser.add_argument("--features_file", required=True, help="Path to the inserted.features.pin file (the input make-pin.pin file with normalized final output weights inserted as the default direction).")
    parser.add_argument("--revised_features_file", required=True, help="Path to save the revised inserted.features.pin file.")
    parser.add_argument("--N", type=int, required=True, help="Number of top-scoring PSMs to be used for updates.")

    args = parser.parse_args()
    revise_labels(
        target_peptide_file=args.target_peptide_file,
        features_file=args.features_file,
        revised_features_file=args.revised_features_file,
        N=args.N
    )
